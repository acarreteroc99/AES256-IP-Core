
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
using namespace std;

#define Nb 4
#define Nk 8
#define Nr 14
#define Ne 16


/* =====================  KEY GENERATION ====================== */
unsigned char subWord(unsigned char temp){

    unsigned char sbox[256] =  {
              0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76
            , 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0
            , 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15
            , 0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75
            , 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84
            , 0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF
            , 0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8
            , 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2
            , 0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73
            , 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB
            , 0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79
            , 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08
            , 0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A
            , 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E
            , 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF
            , 0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
            };

    return (sbox[temp]);
}

void rotWord(unsigned char temp[4]){

    unsigned char aux;

    aux = temp[0];

    temp[0] = temp[1];
    temp[1] = temp[2];
    temp[2] = temp[3];
    temp[3] = aux;
}

void keyExpansion(unsigned char input[32], unsigned char wordlist[60][4], unsigned char Rcon[10]){

    unsigned char temp[4];
    int index = 0;
    int aux;

    while(index < Nk){
        for(int i = 0; i < 4; i++)
            wordlist[index][i] = input[i+4*index];
        index++;
    }

    index = Nk;

    while(index < Nb*(Nr+1)){
        for(int i = 0; i < 4; i++)
            temp[i] = wordlist[index-1][i];

        if((index % Nk) == 0){
            rotWord(temp);
            temp[0] = subWord(temp[0]) ^ Rcon[(index/Nk)-1];                            // FIPS 197 standard says Rcon[(index/Nk)-1] ;; cryptool.com says Rcon[(index/Nk)]
            for(int i = 1; i<4; i++){
                temp[i] = subWord(temp[i]); 
            } 
        }
        else{ 
            if ((Nk > 6) && ((index % Nk) == 4)){
                for(int i = 0; i<4; i++)
                    temp[i] = subWord(temp[i]);  
            }
        }

        for(int i = 0; i<4; i++)
            wordlist[index][i] = wordlist[index-Nk][i] ^ temp[i];

        index++;
    }

}

void wordlistToKey(unsigned char wordlist[60][4], unsigned char key[15][16]){

    int j;
    int nWord = 0;

    for(int i = 0; i < 15; i=i+1){
        j = 0;
        if(nWord < 60){
            while(j < 16){
                for(int z = 0; z < 4; z=z+1){
                    key[i][j] = wordlist[nWord][z];
                    j++;
                }
                nWord++;
            }
        }
    }

}

/* ======================================================================== */

/* ========================= AES256 ENCRYPTION ============================= */

void substitution(unsigned char temp[4][4]){

    unsigned char sbox[256] =  {
              0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76
            , 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0
            , 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15
            , 0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75
            , 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84
            , 0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF
            , 0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8
            , 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2
            , 0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73
            , 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB
            , 0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79
            , 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08
            , 0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A
            , 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E
            , 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF
            , 0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
    };

    for(int i = 0; i < Nb; i++){
        for(int j = 0; j < Nb; j++){
            temp[i][j] = sbox[temp[i][j]];
        }
    }
}

void shifting(unsigned char temp[4][4]){

    unsigned char aux1, aux2, aux3, aux4;

    aux1 = temp[1][0];
    aux2 = temp[2][0]; 
    aux3 = temp[2][1];
    aux4 = temp[3][3];

    temp[0][0] = temp[0][0];
    temp[0][1] = temp[0][1];
    temp[0][2] = temp[0][2];
    temp[0][3] = temp[0][3];

    temp[1][0] = temp[1][1];
    temp[1][1] = temp[1][2];
    temp[1][2] = temp[1][3];
    temp[1][3] = aux1;

    temp[2][0] = temp[2][2];
    temp[2][1] = temp[2][3];
    temp[2][2] = aux2;
    temp[2][3] = aux3;

    temp[3][3] = temp[3][2];
    temp[3][2] = temp[3][1];
    temp[3][1] = temp[3][0];
    temp[3][0] = aux4;

}

unsigned char xtime(unsigned char num){
    if (num / 128 == 0)
		return (num << 1);
	else
		return ((num << 1) ^ 0x1b);
} 

void mixColumns(unsigned char temp[4][4]){

    unsigned char state[16];

    for(int i = 0; i < 4; i++)
        for(int j = 0; j < 4; j++)
            state[i*4 + j] = temp[i][j]; 

    for (int i = 0; i < 4; i++) {
            uint8_t temp[4];
            memcpy(temp, &(state[i*4]), 4);
            state[i*4] = xtime(temp[0]) ^ (xtime(temp[1]) ^ temp[1]) ^ temp[2] ^ temp[3];
            state[i*4+1] = temp[0] ^ xtime(temp[1]) ^ (xtime(temp[2]) ^ temp[2]) ^ temp[3];
            state[i*4+2] = temp[0] ^ temp[1] ^ xtime(temp[2]) ^ (xtime(temp[3]) ^ temp[3]);
            state[i*4+3] = (xtime(temp[0]) ^ temp[0]) ^ temp[1] ^ temp[2] ^ xtime(temp[3]);
    }

    for(int i = 0; i < 4; i++)
        for(int j = 0; j < 4; j++)
            temp[i][j] = state[i*4 + j]; 
}

void addRoundKey(unsigned char temp[4][4], unsigned char key[16]){

    for(int i = 0; i < Nb; i=i+1){
        for(int j = 0; j < Nb; j=j+1){
            //printf("%02x XOR %02x || ", temp[i][j], key[(i*Nb) + j]);
            temp[i][j] = temp[i][j] ^ key[(i*Nb) + j];
        }
    }

}

/* ======================================================================================================== */

void printResults(unsigned char data[4][4]){

    for (int index = 0; index < 4; index++){
        for(int i = 0; i<4; i++){
            if( i==3 )
                printf("%02x ", data[index][i]);
            else
                printf("%02x", data[index][i]);
        }
        if(index%4 == 3)
            printf("\n");
    }
}

int main(){

    /*
    unsigned char data [4][4] = {
                            {0x00, 0x00, 0x00, 0x01}, 
                            {0x00, 0x00, 0x00, 0x02},
                            {0x00, 0x00, 0x00, 0x03},
                            {0x00, 0x00, 0x00, 0x04}
                            };
    */

   unsigned char data [4][4] = {
                            {0x11, 0x11, 0x11, 0x11}, 
                            {0x22, 0x22, 0x22, 0x22},
                            {0x33, 0x33, 0x33, 0x33},
                            {0x44, 0x44, 0x44, 0x44}
                            };


    unsigned char initialKey[32] = {
                                    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 
                                    0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                                    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 
                                    0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
                                    };
    
    unsigned char Rcon[10] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

    unsigned char wordlist [60][4];
    unsigned char key [15][16];

    int index;

    keyExpansion(initialKey, wordlist, Rcon);
    wordlistToKey(wordlist, key);

    /*
    cout << "----------- AES256 KEYS ---------" << endl;
    for(int index = 0; index < 15; index++){
        for(int i = 0; i<16; i++){
           printf("%02x", key[index][i]);
        }
        printf("\n");
    }
    cout << "---------------------------------------" << endl;
    */

    addRoundKey(data, key[0]);
    printf("\n");

    cout << "---- ROUND 0 ----: " << endl;
    cout << "AddRK: ";
    printResults(data);
    printf("\n");

    for(int i = 1; i < Nr; i=i+1){
        cout << "---- ROUND " << i << " ----: " << endl;
        substitution(data);
        cout << "Substitution: ";
        printResults(data);

        shifting(data);
        cout << "Shifting: ";
        printResults(data);

        mixColumns(data);
        cout << "mixColumns: ";
        printResults(data);

        addRoundKey(data, key[i]);
        cout << "AddRK: ";
        printResults(data);
        printf("\n");
        cout << "-----------------------------" << endl;
    } 

        cout << "---- LAST ROUND ----: " << endl;
        substitution(data);
        cout << "Substitution: ";
        printResults(data);

        shifting(data);
        cout << "Shifting: ";
        printResults(data);

        addRoundKey(data, key[14]);
        cout << "AddRK: ";
        printResults(data);
        printf("\n");
        cout << "-----------------------------" << endl;

    printResults(data);

    return 0;
	}
