$date
	Thu Sep  9 13:07:16 2021
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module tb_AES256_enc $end
$var wire 128 ! encData [127:0] $end
$var reg 1 " addr $end
$var reg 1 # clk $end
$var reg 8 $ flags [7:0] $end
$var reg 128 % plaintext [127:0] $end
$var reg 1 & resetn $end
$scope module DUT $end
$var wire 1 " addr $end
$var wire 1 # clk $end
$var wire 128 ' encData [127:0] $end
$var wire 8 ( flags [7:0] $end
$var wire 128 ) plaintext [127:0] $end
$var wire 1 & resetn $end
$var wire 1 * req_ROM $end
$var wire 1 + reg41_full $end
$var wire 1 , reg163_empty $end
$var wire 1 - reg162_full $end
$var wire 1 . reg161_full $end
$var wire 128 / key [127:0] $end
$var wire 1 0 fifo_empty $end
$var wire 32 1 dataOut_shifter [31:0] $end
$var wire 32 2 dataOut_reg4_1 [31:0] $end
$var wire 128 3 dataOut_reg16_2 [127:0] $end
$var wire 128 4 dataOut_reg16_1 [127:0] $end
$var wire 8 5 dataOut_reg163 [7:0] $end
$var wire 128 6 dataOut_mixColumns [127:0] $end
$var wire 8 7 dataOut_fifo [7:0] $end
$var wire 128 8 dataOut_addRK [127:0] $end
$var wire 8 9 dataOut_ROM [7:0] $end
$var wire 128 : dataOut2_demux [127:0] $end
$var wire 8 ; dataOut1_demux [7:0] $end
$var wire 128 < dataIn_addRK [127:0] $end
$var wire 1 = OK_shifter $end
$var wire 1 > OK_romKey $end
$var wire 1 ? OK_mC $end
$var wire 1 @ OK_addRK $end
$var wire 1 A OK_ROM $end
$var reg 128 B encryptedData [127:0] $end
$var reg 8 C regCTRL [7:0] $end
$var reg 4 D round [3:0] $end
$var integer 32 E i [31:0] $end
$scope module addRK $end
$var wire 1 # clk $end
$var wire 1 & resetn $end
$var wire 1 , reg_empty $end
$var wire 1 > rd_comp $end
$var wire 128 F p [127:0] $end
$var wire 128 G k [127:0] $end
$var reg 128 H o [127:0] $end
$var reg 1 @ ok $end
$var reg 1 I rd_romKey $end
$var reg 1 J reg163_empty $end
$var reg 128 K regKey [127:0] $end
$var reg 128 L reg_p [127:0] $end
$var integer 32 M i [31:0] $end
$upscope $end
$scope module demux $end
$var wire 1 " addr $end
$var wire 128 N inp [127:0] $end
$var wire 8 O outp0 [7:0] $end
$var wire 128 P outp1 [127:0] $end
$var reg 128 Q auxData [127:0] $end
$var reg 8 R auxFlags [7:0] $end
$var integer 32 S i [31:0] $end
$upscope $end
$scope module fifo $end
$var wire 1 # clk $end
$var wire 1 & resetn $end
$var wire 1 , reg16_empty $end
$var wire 1 A rd_ROM $end
$var wire 8 T inp [7:0] $end
$var reg 1 0 empty $end
$var reg 8 U outp [7:0] $end
$var reg 8 V reg_inp [7:0] $end
$var reg 1 W reg_rdROM $end
$upscope $end
$scope module mixColumns $end
$var wire 1 # clk $end
$var wire 1 & reset $end
$var wire 128 X state_out_comb [127:0] $end
$var wire 128 Y state [127:0] $end
$var wire 1 - enable $end
$var reg 1 ? done $end
$var reg 128 Z state_out [127:0] $end
$var integer 32 [ index [31:0] $end
$scope function MultiplyByThree $end
$var reg 8 \ MultiplyByThree [7:0] $end
$var reg 8 ] x [7:0] $end
$upscope $end
$scope function MultiplyByTwo $end
$var reg 8 ^ MultiplyByTwo [7:0] $end
$var reg 8 _ x [7:0] $end
$upscope $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$upscope $end
$scope module mux $end
$var wire 1 ` addr $end
$var wire 128 a inp0 [127:0] $end
$var wire 128 b outp [127:0] $end
$var wire 128 c inp1 [127:0] $end
$upscope $end
$scope module reg16_1 $end
$var wire 1 # clk $end
$var wire 1 ? rd_en $end
$var wire 1 & resetn $end
$var wire 1 = wr_en $end
$var wire 32 d i [31:0] $end
$var reg 128 e aux [127:0] $end
$var reg 2 f counter [1:0] $end
$var reg 128 g o [127:0] $end
$var reg 1 . reg_full $end
$var integer 32 h index [31:0] $end
$upscope $end
$scope module reg16_2 $end
$var wire 1 # clk $end
$var wire 128 i i [127:0] $end
$var wire 1 & resetn $end
$var wire 1 ? wr_en $end
$var reg 128 j o [127:0] $end
$var reg 1 - reg_full $end
$var integer 32 k index [31:0] $end
$upscope $end
$scope module reg16_3 $end
$var wire 1 # clk $end
$var wire 128 l i [127:0] $end
$var wire 1 0 req_fifo $end
$var wire 1 & resetn $end
$var wire 1 @ wr_en $end
$var reg 128 m aux [127:0] $end
$var reg 4 n n_read [3:0] $end
$var reg 8 o o [7:0] $end
$var reg 1 , reg_empty $end
$var integer 32 p index [31:0] $end
$upscope $end
$scope module reg4_1 $end
$var wire 1 # clk $end
$var wire 1 & resetn $end
$var wire 1 A wr_en $end
$var wire 1 = rd_en $end
$var wire 8 q i [7:0] $end
$var reg 32 r aux [31:0] $end
$var reg 2 s counter [1:0] $end
$var reg 32 t o [31:0] $end
$var reg 1 + reg_full $end
$var integer 32 u index [31:0] $end
$upscope $end
$scope module rom_Sbox $end
$var wire 8 v addr [7:0] $end
$var wire 1 # clk $end
$var wire 1 0 fifo_empty $end
$var wire 1 + reg_full $end
$var wire 1 & resetn $end
$var reg 8 w data [7:0] $end
$var reg 1 A done $end
$var reg 1 * wr_req $end
$upscope $end
$scope module rom_key $end
$var wire 1 # clk $end
$var wire 1 & resetn $end
$var wire 4 x selectKey [3:0] $end
$var wire 1 " startBit $end
$var wire 1 @ wr_en $end
$var reg 128 y data [127:0] $end
$var reg 1 > done $end
$var reg 1 z reg_startBit $end
$upscope $end
$scope module shifter $end
$var wire 1 # clk $end
$var wire 32 { inp [31:0] $end
$var wire 1 & resetn $end
$var wire 1 . wr_en $end
$var reg 1 = done $end
$var reg 32 | outp [31:0] $end
$var reg 1 } reg_wrEn $end
$var reg 2 ~ row [1:0] $end
$upscope $end
$upscope $end
$scope task enableResetn $end
$upscope $end
$scope task test_AES_encryption $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ~
x}
bx |
bx {
xz
bx y
bx x
bx w
bx v
bx u
bx t
b0 s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
b0 i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
x`
bx _
bx0 ^
bx ]
bx \
bx [
b0 Z
bx Y
bx X
xW
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
xJ
xI
bx H
bx G
bx F
bx E
bx D
bx C
bx B
xA
x@
0?
x>
x=
bx <
bx ;
bx :
bx 9
bx 8
bx 7
b0 6
bx 5
bx 4
bx 3
bx 2
bx 1
x0
bx /
x.
x-
x,
x+
x*
bx )
bx (
bx '
x&
bx %
bx $
0#
x"
bx !
$end
#1000
1=
0-
1@
0I
0>
1#
#1100
b0 X
b0 \
b0 ]
b0 ^
b0 _
b0 m
b10000 p
b0 n
1,
b0 /
b0 G
b0 y
1J
b0 4
b0 Y
b0 g
b0 e
b10000 h
0.
b0 f
b0 2
b0 t
b0 {
b0 r
b100 u
0+
0&
#2000
0#
#3000
b0 <
b0 F
b0 b
0`
b0 !
b0 '
b0 B
b0 C
b10000 E
b0 D
b0 x
b0 K
b0 3
b0 c
b0 j
b10000 k
b10000 [
0=
b0 1
b0 d
b0 |
0}
b1 ~
0*
1A
10
b0 V
b100 u
b10000 h
b10000 p
1#
#3100
b1 ;
b1 O
b1 R
b1 %
b1 )
b1 N
0"
1&
#4000
0#
#5000
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 <
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 F
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 b
1`
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 :
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 P
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 Q
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 a
b10000 S
00
bx V
1W
1=
b0 L
0J
b1 C
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 %
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 )
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 N
1"
0,
bx m
b10000 p
0z
b1 s
b0xxxxxxxx r
1#
#6000
0#
#7000
b10000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111 /
b10000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111 G
b10000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111 y
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 L
1I
b10 ~
0=
10
b10 s
b0xxxxxxxxxxxxxxxx r
b1 f
b100 h
1>
1z
1#
#8000
0#
#9000
00
1=
b10000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111 K
b1 n
b11 s
b0xxxxxxxxxxxxxxxxxxxxxxxx r
1#
#10000
0#
#11000
b11 ~
0=
10
1+
b0 s
bx r
b10 f
b100 h
1#
#12000
0#
#13000
00
1=
b10 n
1#
#14000
0#
#15000
b0 ~
0=
bx 1
bx d
bx |
10
bx 2
bx t
bx {
b100 u
0+
b11 f
b100 h
1#
#16000
0#
#17000
00
1=
b11 n
b1 s
1#
#18000
0#
#19000
1}
10
b10 s
1.
b0 f
bx000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 e
b100 h
1#
#20000
0#
#21000
00
b100 n
b11 s
1#
#22000
0#
#23000
10
1+
b0 s
1#
#24000
0#
#25000
00
b101 n
b100 u
0+
1#
#26000
0#
#27000
10
b1 s
1#
#28000
0#
#29000
00
b110 n
b10 s
1#
#30000
0#
#31000
10
b11 s
1#
#32000
0#
#33000
00
b111 n
1+
b0 s
1#
#34000
0#
#35000
10
b100 u
0+
1#
#36000
0#
#37000
00
b1000 n
b1 s
1#
#38000
0#
#39000
10
b10 s
1#
#40000
0#
#41000
00
b1001 n
b11 s
1#
#42000
0#
#43000
10
1+
b0 s
1#
#44000
0#
#45000
00
b1010 n
b100 u
0+
1#
#46000
0#
#47000
10
b1 s
1#
#48000
0#
#49000
00
b1011 n
b10 s
1#
#50000
0#
#51000
10
b11 s
1#
#52000
0#
#53000
00
b1100 n
1+
b0 s
1#
#54000
0#
#55000
10
b100 u
0+
1#
#56000
0#
#57000
00
b1101 n
b1 s
1#
#58000
0#
#59000
10
b10 s
1#
#60000
0#
#61000
00
b1110 n
b11 s
1#
#62000
0#
#63000
10
1+
b0 s
1#
#64000
0#
#65000
00
b1111 n
b100 u
0+
1#
#66000
0#
#67000
10
b1 s
1#
#68000
0#
#69000
b1 D
b1 x
b10000001100000010000001110000011000000001000000000000011100000110000101010001010000110011001100100111000101110000 8
b10000001100000010000001110000011000000001000000000000011100000110000101010001010000110011001100100111000101110000 H
b10000001100000010000001110000011000000001000000000000011100000110000101010001010000110011001100100111000101110000 l
b10000 M
0@
0I
0J
1,
b0 n
b10 s
1#
#70000
0#
#71000
b10 D
b10 x
1@
1J
b11 s
0>
1#
#72000
0#
#73000
b1111000011100000110100001100000010110000101000001001000010000000011100000110000001010000010000000011000000100000000100000000 /
b1111000011100000110100001100000010110000101000001001000010000000011100000110000001010000010000000011000000100000000100000000 G
b1111000011100000110100001100000010110000101000001001000010000000011100000110000001010000010000000011000000100000000100000000 y
00
1I
0J
0,
b10000001100000010000001110000011000000001000000000000011100000110000101010001010000110011001100100111000101110000 m
b10000 p
1>
1+
b0 s
1#
#74000
0#
#75000
b1111000011100000110100001100000010110000101000001001000010000000011100000110000001010000010000000011000000100000000100000000 K
10
b100 u
0+
1#
#76000
0#
#77000
00
b1110000 V
b1 n
b1110000 5
b1110000 T
b1110000 o
b1 s
1#
#78000
0#
#79000
b1010001 9
b1010001 q
b1010001 w
10
b1110000 7
b1110000 U
b1110000 v
b10 s
1#
#80000
0#
#81000
00
b1110001 V
b10 n
b1110001 5
b1110001 T
b1110001 o
b11 s
bx01010001xxxxxxxxxxxxxxxx r
1#
#82000
0#
#83000
10
b1110001 7
b1110001 U
b1110001 v
1+
b0 s
b101000101010001xxxxxxxxxxxxxxxx r
1#
#84000
0#
#85000
00
b110010 V
b10100011 9
b10100011 q
b10100011 w
b11 n
b110010 5
b110010 T
b110010 o
b101000101010001xxxxxxxxxxxxxxxx 2
b101000101010001xxxxxxxxxxxxxxxx t
b101000101010001xxxxxxxxxxxxxxxx {
b100 u
0+
1#
#86000
0#
#87000
b100011 9
b100011 q
b100011 w
10
b110010 7
b110010 U
b110010 v
b1 s
b101000101010001xxxxxxxx10100011 r
1#
#88000
0#
#89000
00
b110011 V
b100 n
b110011 5
b110011 T
b110011 o
b10 s
b1010001010100010010001110100011 r
1#
#90000
0#
#91000
b11000011 9
b11000011 q
b11000011 w
10
b110011 7
b110011 U
b110011 v
b11 s
b1010001001000110010001110100011 r
1#
#92000
0#
#93000
00
b10100 V
b101 n
b10100 5
b10100 T
b10100 o
1+
b0 s
b11000011001000110010001110100011 r
1#
#94000
0#
#95000
b11111010 9
b11111010 q
b11111010 w
10
b10100 7
b10100 U
b10100 v
b11000011001000110010001110100011 2
b11000011001000110010001110100011 t
b11000011001000110010001110100011 {
b100 u
0+
1#
#96000
0#
#97000
00
b10101 V
b110 n
b10101 5
b10101 T
b10101 o
b1 s
b11000011001000110010001111111010 r
1#
#98000
0#
#99000
b1011001 9
b1011001 q
b1011001 w
10
b10101 7
b10101 U
b10101 v
b10 s
b11000011001000111111101011111010 r
1#
#100000
0#
#101000
00
b110 V
b111 n
b110 5
b110 T
b110 o
b11 s
b11000011010110011111101011111010 r
1#
#102000
0#
#103000
10
b110 7
b110 U
b110 v
1+
b0 s
b1011001010110011111101011111010 r
1#
#104000
0#
#105000
00
b111 V
b1101111 9
b1101111 q
b1101111 w
b1000 n
b111 5
b111 T
b111 o
b1011001010110011111101011111010 2
b1011001010110011111101011111010 t
b1011001010110011111101011111010 {
b100 u
0+
1#
#106000
0#
#107000
b11000101 9
b11000101 q
b11000101 w
10
b111 7
b111 U
b111 v
b1 s
b1011001010110011111101001101111 r
1#
#108000
0#
#109000
00
b0 V
b1001 n
b0 5
b0 T
b0 o
b10 s
b1011001010110011100010101101111 r
1#
#110000
0#
#111000
b1100011 9
b1100011 q
b1100011 w
10
b0 7
b0 U
b0 v
b11 s
b1011001110001011100010101101111 r
1#
#112000
0#
#113000
00
b1 V
b1010 n
b1 5
b1 T
b1 o
1+
b0 s
b1100011110001011100010101101111 r
1#
#114000
0#
#115000
b1111100 9
b1111100 q
b1111100 w
10
b1 7
b1 U
b1 v
b1100011110001011100010101101111 2
b1100011110001011100010101101111 t
b1100011110001011100010101101111 {
b100 u
0+
1#
#116000
0#
#117000
00
b110 V
b1011 n
b110 5
b110 T
b110 o
b1 s
b1100011110001011100010101111100 r
1#
#118000
0#
#119000
b1101111 9
b1101111 q
b1101111 w
10
b110 7
b110 U
b110 v
b10 s
b1100011110001010111110001111100 r
1#
#120000
0#
#121000
00
b111 V
b1100 n
b111 5
b111 T
b111 o
b11 s
b1100011011011110111110001111100 r
1#
#122000
0#
#123000
10
b111 7
b111 U
b111 v
1+
b0 s
b1101111011011110111110001111100 r
1#
#124000
0#
#125000
00
b10 V
b11000101 9
b11000101 q
b11000101 w
b1101 n
b10 5
b10 T
b10 o
b1101111011011110111110001111100 2
b1101111011011110111110001111100 t
b1101111011011110111110001111100 {
b100 u
0+
1#
