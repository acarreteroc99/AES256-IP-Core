$date
	Sat Aug 28 19:32:32 2021
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module tb_AES256_enc $end
$var wire 128 ! encData [127:0] $end
$var reg 2 " addr [1:0] $end
$var reg 1 # clk $end
$var reg 8 $ flags [7:0] $end
$var reg 128 % plaintext [127:0] $end
$var reg 1 & resetn $end
$scope module DUT $end
$var wire 2 ' addr [1:0] $end
$var wire 1 # clk $end
$var wire 128 ( encData [127:0] $end
$var wire 1 ) fifo_wr_en $end
$var wire 8 * flags [7:0] $end
$var wire 128 + plaintext [127:0] $end
$var wire 1 , req_mixColumns $end
$var wire 1 & resetn $end
$var wire 1 - req_ROM $end
$var wire 1 . reg41_full $end
$var wire 1 / reg163_empty $end
$var wire 1 0 reg162_full $end
$var wire 1 1 reg161_full $end
$var wire 128 2 key [127:0] $end
$var wire 1 3 fifo_full $end
$var wire 1 4 fifo_empty $end
$var wire 1 5 fifo_counter $end
$var wire 32 6 dataOut_shifter [31:0] $end
$var wire 32 7 dataOut_reg4_1 [31:0] $end
$var wire 128 8 dataOut_reg16_2 [127:0] $end
$var wire 128 9 dataOut_reg16_1 [127:0] $end
$var wire 8 : dataOut_reg163 [7:0] $end
$var wire 128 ; dataOut_mixColumns [127:0] $end
$var wire 8 < dataOut_fifo [7:0] $end
$var wire 128 = dataOut_addRK [127:0] $end
$var wire 8 > dataOut_ROM [7:0] $end
$var wire 128 ? dataOut2_demux [127:0] $end
$var wire 8 @ dataOut1_demux [7:0] $end
$var wire 128 A dataIn_addRK [127:0] $end
$var wire 1 B OK_shifter $end
$var wire 1 C OK_romKey $end
$var wire 1 D OK_mC $end
$var wire 1 E OK_addRK $end
$var wire 1 F OK_ROM $end
$var reg 128 G encryptedData [127:0] $end
$var reg 8 H regCTRL [7:0] $end
$var reg 4 I round [3:0] $end
$var integer 32 J i [31:0] $end
$scope module addRK $end
$var wire 1 # clk $end
$var wire 1 & resetn $end
$var wire 1 / reg_full $end
$var wire 1 C rd_comp $end
$var wire 128 K p [127:0] $end
$var wire 128 L k [127:0] $end
$var reg 128 M o [127:0] $end
$var reg 1 E ok $end
$var integer 32 N i [31:0] $end
$upscope $end
$scope module demux $end
$var wire 2 O addr [1:0] $end
$var wire 128 P inp [127:0] $end
$var wire 8 Q outp0 [7:0] $end
$var wire 128 R outp1 [127:0] $end
$var reg 128 S auxData [127:0] $end
$var reg 8 T auxFlags [7:0] $end
$var integer 32 U i [31:0] $end
$upscope $end
$scope module fifo $end
$var wire 1 # clk $end
$var wire 1 & rst $end
$var wire 1 ) wr_en $end
$var wire 1 F rd_en $end
$var wire 8 V buf_in [7:0] $end
$var reg 1 4 buf_empty $end
$var reg 1 3 buf_full $end
$var reg 8 W buf_mem [7:0] $end
$var reg 8 X buf_out [7:0] $end
$var reg 1 5 fifo_counter $end
$upscope $end
$scope module mixColumns $end
$var wire 1 # clk $end
$var wire 1 & reset $end
$var wire 128 Y state_out_comb [127:0] $end
$var wire 128 Z state [127:0] $end
$var wire 1 0 enable $end
$var reg 1 D done $end
$var reg 128 [ state_out [127:0] $end
$var integer 32 \ index [31:0] $end
$scope function MultiplyByThree $end
$var reg 8 ] MultiplyByThree [7:0] $end
$var reg 8 ^ x [7:0] $end
$upscope $end
$scope function MultiplyByTwo $end
$var reg 8 _ MultiplyByTwo [7:0] $end
$var reg 8 ` x [7:0] $end
$upscope $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$upscope $end
$scope module mux $end
$var wire 4 a addr [3:0] $end
$var wire 128 b inp0 [127:0] $end
$var wire 128 c outp [127:0] $end
$var wire 128 d inp1 [127:0] $end
$upscope $end
$scope module reg16_1 $end
$var wire 1 # clk $end
$var wire 1 , rd_en $end
$var wire 1 & resetn $end
$var wire 1 B wr_en $end
$var wire 32 e i [31:0] $end
$var reg 128 f aux [127:0] $end
$var reg 2 g counter [1:0] $end
$var reg 128 h o [127:0] $end
$var reg 1 1 reg_full $end
$var integer 32 i index [31:0] $end
$upscope $end
$scope module reg16_2 $end
$var wire 1 # clk $end
$var wire 128 j i [127:0] $end
$var wire 1 & resetn $end
$var wire 1 D wr_en $end
$var reg 128 k o [127:0] $end
$var reg 1 0 reg_full $end
$var integer 32 l index [31:0] $end
$upscope $end
$scope module reg16_3 $end
$var wire 1 # clk $end
$var wire 128 m i [127:0] $end
$var wire 1 4 req_fifo $end
$var wire 1 & resetn $end
$var wire 1 E wr_en $end
$var reg 128 n aux [127:0] $end
$var reg 4 o n_read [3:0] $end
$var reg 8 p o [7:0] $end
$var reg 1 / reg_empty $end
$var integer 32 q index [31:0] $end
$upscope $end
$scope module reg4_1 $end
$var wire 1 # clk $end
$var wire 1 & resetn $end
$var wire 1 - wr_en $end
$var wire 1 B rd_en $end
$var wire 8 r i [7:0] $end
$var reg 32 s aux [31:0] $end
$var reg 3 t counter [2:0] $end
$var reg 32 u o [31:0] $end
$var reg 1 . reg_full $end
$var integer 32 v index [31:0] $end
$upscope $end
$scope module rom_Sbox $end
$var wire 8 w addr [7:0] $end
$var wire 1 # clk $end
$var wire 1 3 fifo_full $end
$var wire 1 . reg_full $end
$var reg 8 x data [7:0] $end
$var reg 1 F done $end
$var reg 1 - wr_req $end
$upscope $end
$scope module rom_key $end
$var wire 4 y addr [3:0] $end
$var wire 1 # clk $end
$var wire 1 E wr_en $end
$var reg 128 z data [127:0] $end
$var reg 1 C done $end
$upscope $end
$scope module shifter $end
$var wire 1 # clk $end
$var wire 32 { inp [31:0] $end
$var wire 1 & resetn $end
$var wire 1 1 wr_en $end
$var reg 1 B done $end
$var reg 32 | outp [31:0] $end
$var reg 2 } row [1:0] $end
$var integer 32 ~ index [31:0] $end
$upscope $end
$upscope $end
$scope task enableResetn $end
$upscope $end
$scope task test_AES_encryption $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ~
b0 }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
b0 t
bx s
bx r
bx q
bx p
b0 o
bx n
bx m
bx l
bx k
b0 j
bx i
bx h
b0 g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx0 _
bx ^
bx ]
bx \
b0 [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
xF
0E
0D
0C
0B
bx A
bx @
bx ?
bx >
bx =
bx <
b0 ;
bx :
bx 9
bx 8
bx 7
bx 6
x5
x4
x3
bx 2
01
00
1/
0.
x-
z,
bx +
bx *
z)
bx (
bx '
x&
bx %
bx $
0#
bx "
bx !
$end
#10000
0-
1F
1B
b1 }
1#
#12000
b0 !
b0 (
b0 G
b10000 J
b0 I
b0 a
b0 y
b0 =
b0 M
b0 m
b10000 N
b0 7
b0 u
b0 {
b0 s
b100 v
0&
#20000
0#
#30000
b0 Y
b0 ]
b0 ^
b0 _
b0 `
b100 v
b0 A
b0 K
b0 c
b10000 N
b10000 J
b1 g
b0 9
b0 Z
b0 h
b0 f
b100 i
b0 6
b0 e
b0 |
b100 ~
1B
b1 }
b0 n
b10000 q
b0 :
b0 V
b0 p
b0 8
b0 d
b0 k
b10000 l
1#
#32000
03
14
05
b0 <
b0 X
b0 w
b1 H
b1 @
b1 Q
b1 T
b1 %
b1 +
b1 P
b0 "
b0 '
b0 O
1&
#40000
0#
#50000
b1100011 >
b1100011 r
b1100011 x
b10 }
1B
b10 g
b100 i
b10000 \
b1 "
b1 '
b1 O
1#
#60000
0#
#70000
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 ?
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 R
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 S
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 b
b10000 U
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 %
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 +
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 P
b10000 \
b11 g
b100 i
b11 }
1B
1#
#80000
0#
#90000
11
b0 g
b100 i
b10000 \
1#
#100000
0#
#110000
b10000 \
1#
#120000
0#
#130000
b10000 \
1#
#140000
0#
#150000
b10000 \
1#
#160000
0#
#170000
b10000 \
1#
#180000
0#
#190000
b10000 \
1#
#200000
0#
#210000
b10000 \
1#
#220000
0#
#230000
b10000 \
1#
#240000
0#
#250000
b10000 \
1#
#260000
0#
#270000
b10000 \
1#
#280000
0#
#290000
b10000 \
1#
#300000
0#
#310000
b10000 \
1#
#320000
0#
#330000
b10000 \
1#
#340000
0#
#350000
b10000 \
1#
#360000
0#
#370000
b10000 \
1#
#380000
0#
#390000
b10000 \
1#
#400000
0#
#410000
b10000 \
1#
#420000
0#
#430000
b10000 \
1#
#440000
0#
#450000
b10000 \
1#
#460000
0#
#470000
b10000 \
1#
#480000
0#
#490000
b10000 \
1#
#500000
0#
#510000
b10000 \
1#
#520000
0#
#530000
b10000 \
1#
#540000
0#
#550000
b10000 \
1#
#560000
0#
#570000
b10000 \
1#
#580000
0#
#590000
b10000 \
1#
#600000
0#
#610000
b10000 \
1#
#620000
0#
#630000
b10000 \
1#
#640000
0#
#650000
b10000 \
1#
#660000
0#
#670000
b10000 \
1#
