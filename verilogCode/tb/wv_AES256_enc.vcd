$date
	Sun Aug 29 13:46:02 2021
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module tb_AES256_enc $end
$var wire 128 ! encData [127:0] $end
$var reg 1 " addr $end
$var reg 1 # clk $end
$var reg 8 $ flags [7:0] $end
$var reg 128 % plaintext [127:0] $end
$var reg 1 & resetn $end
$scope module DUT $end
$var wire 1 " addr $end
$var wire 1 # clk $end
$var wire 128 ' encData [127:0] $end
$var wire 1 ( fifo_wr_en $end
$var wire 8 ) flags [7:0] $end
$var wire 128 * plaintext [127:0] $end
$var wire 1 + req_mixColumns $end
$var wire 1 & resetn $end
$var wire 1 , req_ROM $end
$var wire 1 - reg41_full $end
$var wire 1 . reg163_empty $end
$var wire 1 / reg162_full $end
$var wire 1 0 reg161_full $end
$var wire 128 1 key [127:0] $end
$var wire 1 2 fifo_full $end
$var wire 1 3 fifo_empty $end
$var wire 1 4 fifo_counter $end
$var wire 32 5 dataOut_shifter [31:0] $end
$var wire 32 6 dataOut_reg4_1 [31:0] $end
$var wire 128 7 dataOut_reg16_2 [127:0] $end
$var wire 128 8 dataOut_reg16_1 [127:0] $end
$var wire 8 9 dataOut_reg163 [7:0] $end
$var wire 128 : dataOut_mixColumns [127:0] $end
$var wire 8 ; dataOut_fifo [7:0] $end
$var wire 128 < dataOut_addRK [127:0] $end
$var wire 8 = dataOut_ROM [7:0] $end
$var wire 128 > dataOut2_demux [127:0] $end
$var wire 8 ? dataOut1_demux [7:0] $end
$var wire 128 @ dataIn_addRK [127:0] $end
$var wire 1 A OK_shifter $end
$var wire 1 B OK_romKey $end
$var wire 1 C OK_mC $end
$var wire 1 D OK_addRK $end
$var wire 1 E OK_ROM $end
$var reg 128 F encryptedData [127:0] $end
$var reg 8 G regCTRL [7:0] $end
$var reg 4 H round [3:0] $end
$var integer 32 I i [31:0] $end
$scope module addRK $end
$var wire 1 # clk $end
$var wire 1 & resetn $end
$var wire 1 . reg_empty $end
$var wire 1 B rd_comp $end
$var wire 128 J p [127:0] $end
$var wire 128 K k [127:0] $end
$var reg 128 L o [127:0] $end
$var reg 1 D ok $end
$var reg 1 M rd_romKey $end
$var reg 1 N reg163_empty $end
$var reg 128 O regKey [127:0] $end
$var reg 128 P reg_p [127:0] $end
$var integer 32 Q i [31:0] $end
$upscope $end
$scope module demux $end
$var wire 1 " addr $end
$var wire 128 R inp [127:0] $end
$var wire 8 S outp0 [7:0] $end
$var wire 128 T outp1 [127:0] $end
$var reg 128 U auxData [127:0] $end
$var reg 8 V auxFlags [7:0] $end
$var integer 32 W i [31:0] $end
$upscope $end
$scope module fifo $end
$var wire 1 # clk $end
$var wire 1 & rst $end
$var wire 1 ( wr_en $end
$var wire 1 E rd_en $end
$var wire 8 X buf_in [7:0] $end
$var reg 1 3 buf_empty $end
$var reg 1 2 buf_full $end
$var reg 8 Y buf_mem [7:0] $end
$var reg 8 Z buf_out [7:0] $end
$var reg 1 4 fifo_counter $end
$upscope $end
$scope module mixColumns $end
$var wire 1 # clk $end
$var wire 1 & reset $end
$var wire 128 [ state_out_comb [127:0] $end
$var wire 128 \ state [127:0] $end
$var wire 1 / enable $end
$var reg 1 C done $end
$var reg 128 ] state_out [127:0] $end
$var integer 32 ^ index [31:0] $end
$scope function MultiplyByThree $end
$var reg 8 _ MultiplyByThree [7:0] $end
$var reg 8 ` x [7:0] $end
$upscope $end
$scope function MultiplyByTwo $end
$var reg 8 a MultiplyByTwo [7:0] $end
$var reg 8 b x [7:0] $end
$upscope $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$upscope $end
$scope module mux $end
$var wire 4 c addr [3:0] $end
$var wire 128 d inp0 [127:0] $end
$var wire 128 e outp [127:0] $end
$var wire 128 f inp1 [127:0] $end
$upscope $end
$scope module reg16_1 $end
$var wire 1 # clk $end
$var wire 1 + rd_en $end
$var wire 1 & resetn $end
$var wire 1 A wr_en $end
$var wire 32 g i [31:0] $end
$var reg 128 h aux [127:0] $end
$var reg 2 i counter [1:0] $end
$var reg 128 j o [127:0] $end
$var reg 1 0 reg_full $end
$var integer 32 k index [31:0] $end
$upscope $end
$scope module reg16_2 $end
$var wire 1 # clk $end
$var wire 128 l i [127:0] $end
$var wire 1 & resetn $end
$var wire 1 C wr_en $end
$var reg 128 m o [127:0] $end
$var reg 1 / reg_full $end
$var integer 32 n index [31:0] $end
$upscope $end
$scope module reg16_3 $end
$var wire 1 # clk $end
$var wire 128 o i [127:0] $end
$var wire 1 3 req_fifo $end
$var wire 1 & resetn $end
$var wire 1 D wr_en $end
$var reg 128 p aux [127:0] $end
$var reg 4 q n_read [3:0] $end
$var reg 8 r o [7:0] $end
$var reg 1 . reg_empty $end
$var integer 32 s index [31:0] $end
$upscope $end
$scope module reg4_1 $end
$var wire 1 # clk $end
$var wire 1 & resetn $end
$var wire 1 , wr_en $end
$var wire 1 A rd_en $end
$var wire 8 t i [7:0] $end
$var reg 32 u aux [31:0] $end
$var reg 3 v counter [2:0] $end
$var reg 32 w o [31:0] $end
$var reg 1 - reg_full $end
$var integer 32 x index [31:0] $end
$upscope $end
$scope module rom_Sbox $end
$var wire 8 y addr [7:0] $end
$var wire 1 # clk $end
$var wire 1 2 fifo_full $end
$var wire 1 - reg_full $end
$var reg 8 z data [7:0] $end
$var reg 1 E done $end
$var reg 1 , wr_req $end
$upscope $end
$scope module rom_key $end
$var wire 4 { addr [3:0] $end
$var wire 1 # clk $end
$var wire 1 & resetn $end
$var wire 1 " startBit $end
$var wire 1 D wr_en $end
$var reg 128 | data [127:0] $end
$var reg 1 B done $end
$upscope $end
$scope module shifter $end
$var wire 1 # clk $end
$var wire 32 } inp [31:0] $end
$var wire 1 & resetn $end
$var wire 1 0 wr_en $end
$var reg 1 A done $end
$var reg 32 ~ outp [31:0] $end
$var reg 2 !" row [1:0] $end
$var integer 32 "" index [31:0] $end
$upscope $end
$upscope $end
$scope task enableResetn $end
$upscope $end
$scope task test_AES_encryption $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ""
b0 !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
b0 v
bx u
bx t
bx s
bx r
b0 q
bx p
bx o
bx n
bx m
b0 l
bx k
bx j
b0 i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx0 a
bx `
bx _
bx ^
b0 ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
1N
xM
bx L
bx K
bx J
bx I
bx H
bx G
bx F
1E
1D
0C
0B
0A
bx @
bx ?
bx >
bx =
bx <
bx ;
b0 :
bx 9
bx 8
bx 7
bx 6
bx 5
x4
x3
x2
bx 1
00
0/
1.
0-
0,
z+
bx *
bx )
z(
bx '
x&
bx %
bx $
0#
x"
bx !
$end
#10000
b0 [
b0 _
b0 `
b0 a
b0 b
b0 !
b0 '
b0 F
b10000 I
b0 H
b0 c
b0 {
b0 p
b0 9
b0 X
b0 r
b0 1
b0 K
b0 |
b0 6
b0 w
b0 }
b0 u
b100 x
1A
b1 !"
bx 5
bx g
bx ~
b100 ""
b0 8
b0 \
b0 j
b0 h
b10000 k
1.
b10000 s
0&
1#
#20000
0#
#30000
b1 v
b0xxxxxxxx u
0E
1,
02
13
04
b0 ;
b0 Z
b0 y
b1 G
b1 ?
b1 S
b1 V
b0 @
b0 J
b0 e
b1 %
b1 *
b1 R
0"
1&
bx 9
bx X
bx r
0.
bx p
b1 i
b100 k
b0 5
b0 g
b0 ~
b100 ""
1A
b1 !"
b10000 s
b10000 I
b0 7
b0 f
b0 m
b10000 n
1#
#40000
0#
#50000
b10000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111 1
b10000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111 K
b10000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111 |
b10000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111 O
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 P
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 @
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 J
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 e
b1 H
b1 c
b1 {
b10 v
b0xxxxxxxxxxxxxxxx u
0D
1M
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 >
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 T
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 U
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 d
b10000 W
b10 !"
1A
b10 i
b100 k
b10000 ^
1B
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 %
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 *
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 R
1"
1#
#60000
0B
0#
#70000
b11 v
b0xxxxxxxxxxxxxxxxxxxxxxxx u
0N
0M
b10000001100000010000001110000011000000001000000000000011100000110000101010001010000110011001100100111000101110000 <
b10000001100000010000001110000011000000001000000000000011100000110000101010001010000110011001100100111000101110000 L
b10000001100000010000001110000011000000001000000000000011100000110000101010001010000110011001100100111000101110000 o
b10000 Q
b10000 ^
b11 i
b100 k
b11 !"
1A
1#
#80000
0#
#90000
10
b0 i
b100 k
b10000 ^
1#
#100000
0#
#110000
b10000 ^
1#
#120000
0#
#130000
b10000 ^
1#
#140000
0#
#150000
b10000 ^
1#
#160000
0#
#170000
b10000 ^
1#
#180000
0#
#190000
b10000 ^
1#
#200000
0#
#210000
b10000 ^
1#
#220000
0#
#230000
b10000 ^
1#
#240000
0#
#250000
b10000 ^
1#
#260000
0#
#270000
b10000 ^
1#
#280000
0#
#290000
b10000 ^
1#
#300000
0#
#310000
b10000 ^
1#
#320000
0#
#330000
b10000 ^
1#
#340000
0#
#350000
b10000 ^
1#
#360000
0#
#370000
b10000 ^
1#
#380000
0#
#390000
b10000 ^
1#
#400000
0#
#410000
b10000 ^
1#
#420000
0#
#430000
b10000 ^
1#
#440000
0#
#450000
b10000 ^
1#
#460000
0#
#470000
b10000 ^
1#
#480000
0#
#490000
b10000 ^
1#
#500000
0#
#510000
b10000 ^
1#
#520000
0#
#530000
b10000 ^
1#
#540000
0#
#550000
b10000 ^
1#
#560000
0#
#570000
b10000 ^
1#
#580000
0#
#590000
b10000 ^
1#
#600000
0#
#610000
b10000 ^
1#
#620000
0#
#630000
b10000 ^
1#
#640000
0#
#650000
b10000 ^
1#
