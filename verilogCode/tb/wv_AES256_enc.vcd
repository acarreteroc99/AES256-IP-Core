$date
	Sun Aug 29 19:54:32 2021
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module tb_AES256_enc $end
$var wire 128 ! encData [127:0] $end
$var reg 1 " addr $end
$var reg 1 # clk $end
$var reg 8 $ flags [7:0] $end
$var reg 128 % plaintext [127:0] $end
$var reg 1 & resetn $end
$scope module DUT $end
$var wire 1 " addr $end
$var wire 1 # clk $end
$var wire 128 ' encData [127:0] $end
$var wire 1 ( fifo_wr_en $end
$var wire 8 ) flags [7:0] $end
$var wire 128 * plaintext [127:0] $end
$var wire 1 & resetn $end
$var wire 1 + req_ROM $end
$var wire 1 , reg41_full $end
$var wire 1 - reg163_empty $end
$var wire 1 . reg162_full $end
$var wire 1 / reg161_full $end
$var wire 128 0 key [127:0] $end
$var wire 1 1 fifo_full $end
$var wire 1 2 fifo_empty $end
$var wire 1 3 fifo_counter $end
$var wire 32 4 dataOut_shifter [31:0] $end
$var wire 32 5 dataOut_reg4_1 [31:0] $end
$var wire 128 6 dataOut_reg16_2 [127:0] $end
$var wire 128 7 dataOut_reg16_1 [127:0] $end
$var wire 8 8 dataOut_reg163 [7:0] $end
$var wire 128 9 dataOut_mixColumns [127:0] $end
$var wire 8 : dataOut_fifo [7:0] $end
$var wire 128 ; dataOut_addRK [127:0] $end
$var wire 8 < dataOut_ROM [7:0] $end
$var wire 128 = dataOut2_demux [127:0] $end
$var wire 8 > dataOut1_demux [7:0] $end
$var wire 128 ? dataIn_addRK [127:0] $end
$var wire 1 @ OK_shifter $end
$var wire 1 A OK_romKey $end
$var wire 1 B OK_mC $end
$var wire 1 C OK_addRK $end
$var wire 1 D OK_ROM $end
$var reg 128 E encryptedData [127:0] $end
$var reg 8 F regCTRL [7:0] $end
$var reg 4 G round [3:0] $end
$var integer 32 H i [31:0] $end
$scope module addRK $end
$var wire 1 # clk $end
$var wire 1 & resetn $end
$var wire 1 - reg_empty $end
$var wire 1 A rd_comp $end
$var wire 128 I p [127:0] $end
$var wire 128 J k [127:0] $end
$var reg 128 K o [127:0] $end
$var reg 1 C ok $end
$var reg 1 L rd_romKey $end
$var reg 1 M reg163_empty $end
$var reg 128 N regKey [127:0] $end
$var reg 128 O reg_p [127:0] $end
$var integer 32 P i [31:0] $end
$upscope $end
$scope module demux $end
$var wire 1 " addr $end
$var wire 128 Q inp [127:0] $end
$var wire 8 R outp0 [7:0] $end
$var wire 128 S outp1 [127:0] $end
$var reg 128 T auxData [127:0] $end
$var reg 8 U auxFlags [7:0] $end
$var integer 32 V i [31:0] $end
$upscope $end
$scope module fifo $end
$var wire 1 # clk $end
$var wire 1 & rst $end
$var wire 1 ( wr_en $end
$var wire 1 D rd_en $end
$var wire 8 W buf_in [7:0] $end
$var reg 1 2 buf_empty $end
$var reg 1 1 buf_full $end
$var reg 8 X buf_mem [7:0] $end
$var reg 8 Y buf_out [7:0] $end
$var reg 1 3 fifo_counter $end
$upscope $end
$scope module mixColumns $end
$var wire 1 # clk $end
$var wire 1 & reset $end
$var wire 128 Z state_out_comb [127:0] $end
$var wire 128 [ state [127:0] $end
$var wire 1 . enable $end
$var reg 1 B done $end
$var reg 128 \ state_out [127:0] $end
$var integer 32 ] index [31:0] $end
$scope function MultiplyByThree $end
$var reg 8 ^ MultiplyByThree [7:0] $end
$var reg 8 _ x [7:0] $end
$upscope $end
$scope function MultiplyByTwo $end
$var reg 8 ` MultiplyByTwo [7:0] $end
$var reg 8 a x [7:0] $end
$upscope $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$upscope $end
$scope module mux $end
$var wire 4 b addr [3:0] $end
$var wire 128 c inp0 [127:0] $end
$var wire 128 d outp [127:0] $end
$var wire 128 e inp1 [127:0] $end
$upscope $end
$scope module reg16_1 $end
$var wire 1 # clk $end
$var wire 1 B rd_en $end
$var wire 1 & resetn $end
$var wire 1 @ wr_en $end
$var wire 32 f i [31:0] $end
$var reg 128 g aux [127:0] $end
$var reg 2 h counter [1:0] $end
$var reg 128 i o [127:0] $end
$var reg 1 / reg_full $end
$var integer 32 j index [31:0] $end
$upscope $end
$scope module reg16_2 $end
$var wire 1 # clk $end
$var wire 128 k i [127:0] $end
$var wire 1 & resetn $end
$var wire 1 B wr_en $end
$var reg 128 l o [127:0] $end
$var reg 1 . reg_full $end
$var integer 32 m index [31:0] $end
$upscope $end
$scope module reg16_3 $end
$var wire 1 # clk $end
$var wire 128 n i [127:0] $end
$var wire 1 2 req_fifo $end
$var wire 1 & resetn $end
$var wire 1 C wr_en $end
$var reg 128 o aux [127:0] $end
$var reg 4 p n_read [3:0] $end
$var reg 8 q o [7:0] $end
$var reg 1 - reg_empty $end
$var integer 32 r index [31:0] $end
$upscope $end
$scope module reg4_1 $end
$var wire 1 # clk $end
$var wire 1 & resetn $end
$var wire 1 + wr_en $end
$var wire 1 @ rd_en $end
$var wire 8 s i [7:0] $end
$var reg 32 t aux [31:0] $end
$var reg 3 u counter [2:0] $end
$var reg 32 v o [31:0] $end
$var reg 1 , reg_full $end
$var integer 32 w index [31:0] $end
$upscope $end
$scope module rom_Sbox $end
$var wire 8 x addr [7:0] $end
$var wire 1 # clk $end
$var wire 1 1 fifo_full $end
$var wire 1 , reg_full $end
$var reg 8 y data [7:0] $end
$var reg 1 D done $end
$var reg 1 + wr_req $end
$upscope $end
$scope module rom_key $end
$var wire 4 z addr [3:0] $end
$var wire 1 # clk $end
$var wire 1 & resetn $end
$var wire 1 " startBit $end
$var wire 1 C wr_en $end
$var reg 128 { data [127:0] $end
$var reg 1 A done $end
$upscope $end
$scope module shifter $end
$var wire 1 # clk $end
$var wire 32 | inp [31:0] $end
$var wire 1 & resetn $end
$var wire 1 / wr_en $end
$var reg 1 @ done $end
$var reg 32 } outp [31:0] $end
$var reg 2 ~ row [1:0] $end
$var integer 32 !" index [31:0] $end
$upscope $end
$upscope $end
$scope task enableResetn $end
$upscope $end
$scope task test_AES_encryption $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx !"
b0 ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
b0 u
bx t
bx s
bx r
bx q
b0 p
bx o
bx n
bx m
bx l
b0 k
bx j
bx i
b0 h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx0 `
bx _
bx ^
bx ]
b0 \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
1M
xL
bx K
bx J
bx I
bx H
bx G
bx F
bx E
1D
1C
0B
0A
0@
bx ?
bx >
bx =
bx <
bx ;
bx :
b0 9
bx 8
bx 7
bx 6
bx 5
bx 4
x3
x2
x1
bx 0
0/
0.
1-
0,
0+
bx *
bx )
z(
bx '
x&
bx %
bx $
0#
x"
bx !
$end
#10000
b0 Z
b0 ^
b0 _
b0 `
b0 a
b0 !
b0 '
b0 E
b10000 H
b0 G
b0 b
b0 z
b0 o
b0 8
b0 W
b0 q
b0 0
b0 J
b0 {
b0 5
b0 v
b0 |
b0 t
b100 w
1@
b1 ~
bx 4
bx f
bx }
b100 !"
b0 7
b0 [
b0 i
b0 g
b10000 j
1-
b10000 r
0&
1#
#20000
0#
#30000
b1 u
b0xxxxxxxx t
0D
1+
01
12
03
b0 :
b0 Y
b0 x
b1 F
b1 >
b1 R
b1 U
b0 ?
b0 I
b0 d
b1 %
b1 *
b1 Q
0"
1&
bx 8
bx W
bx q
0-
bx o
b1 h
b100 j
b0 4
b0 f
b0 }
b100 !"
1@
b1 ~
b10000 r
b10000 H
b0 6
b0 e
b0 l
b10000 m
1#
#40000
0#
#50000
b10000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111 0
b10000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111 J
b10000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111 {
b10000001000000011000001000000010100000110000001110000100000001001000010100000101100001100000011010000111000001111 N
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 O
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 ?
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 I
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 d
b1 G
b1 b
b1 z
b10 u
b0xxxxxxxxxxxxxxxx t
0C
1L
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 =
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 S
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 T
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 c
b10000 V
b10 ~
1@
b10 h
b100 j
b10000 ]
1A
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 %
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 *
b100000001000000110000001100000111000001110000111100001111000111110001111100111111001111110111111101111111 Q
1"
1#
#60000
0A
0#
#70000
b11 u
b0xxxxxxxxxxxxxxxxxxxxxxxx t
b10000001100000010000001110000011000000001000000000000011100000110000101010001010000110011001100100111000101110000 ;
b10000001100000010000001110000011000000001000000000000011100000110000101010001010000110011001100100111000101110000 K
b10000001100000010000001110000011000000001000000000000011100000110000101010001010000110011001100100111000101110000 n
b10000 P
0M
0L
b10000 ]
b11 h
b100 j
b11 ~
1@
1#
#80000
0#
#90000
1/
b0 h
b100 j
b10000 ]
1#
#100000
0#
#110000
b10000 ]
1#
#120000
0#
#130000
b10000 ]
1#
#140000
0#
#150000
b10000 ]
1#
#160000
0#
#170000
b10000 ]
1#
#180000
0#
#190000
b10000 ]
1#
#200000
0#
#210000
b10000 ]
1#
#220000
0#
#230000
b10000 ]
1#
#240000
0#
#250000
b10000 ]
1#
#260000
0#
#270000
b10000 ]
1#
#280000
0#
#290000
b10000 ]
1#
#300000
0#
#310000
b10000 ]
1#
#320000
0#
#330000
b10000 ]
1#
#340000
0#
#350000
b10000 ]
1#
#360000
0#
#370000
b10000 ]
1#
#380000
0#
#390000
b10000 ]
1#
#400000
0#
#410000
b10000 ]
1#
#420000
0#
#430000
b10000 ]
1#
#440000
0#
#450000
b10000 ]
1#
#460000
0#
#470000
b10000 ]
1#
#480000
0#
#490000
b10000 ]
1#
#500000
0#
#510000
b10000 ]
1#
#520000
0#
#530000
b10000 ]
1#
#540000
0#
#550000
b10000 ]
1#
#560000
0#
#570000
b10000 ]
1#
#580000
0#
#590000
b10000 ]
1#
#600000
0#
#610000
b10000 ]
1#
#620000
0#
#630000
b10000 ]
1#
#640000
0#
#650000
b10000 ]
1#
