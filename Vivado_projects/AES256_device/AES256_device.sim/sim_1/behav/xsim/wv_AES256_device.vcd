$date
   Fri Dec 24 20:52:12 2021
$end
$version
  2020.2
$end
$timescale
  1ps
$end
$scope module tb_AES256_device $end
$var reg 1 ! clk $end
$var reg 1 " resetn $end
$var reg 1 # ctrl_dataIn $end
$var reg 1 $ ctrl_dataOut $end
$var reg 2 % mod_en [1:0] $end
$var reg 128 & inp_device [127:0] $end
$var reg 128 ' out_device [127:0] $end
$var reg 128 ( enc_dataOut [127:0] $end
$var reg 128 ) dec_dataOut [127:0] $end
$var integer 32 * i $end
$var integer 32 + j $end
$var integer 32 , index $end
$scope module DUT $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 2 / mod_en [1:0] $end
$var wire 1 0 ctrl_dataIn $end
$var wire 128 1 inp_device [127:0] $end
$var reg 1 $ ctrl_dataOut $end
$var reg 128 ' outp_device [127:0] $end
$var reg 3 2 dev_st [2:0] $end
$var reg 3 3 dev_st_next [2:0] $end
$var reg 4 4 rom_cnt [3:0] $end
$var reg 2 5 seed_cnt [1:0] $end
$var reg 4 6 mod_cnt [3:0] $end
$var reg 1 7 mod_decrease $end
$var reg 1 8 mod_fifo_full $end
$var reg 1 9 rom_dataStored $end
$var reg 1 : end_st_reg $end
$var reg 128 ; seed_reg [127:0] $end
$var reg 128 < data_fifo [127:0] $end
$var reg 2 = mod_fifo [1:0] $end
$var reg 128 > dataOut_reg [127:0] $end
$var reg 128 ? key [127:0] $end
$var reg 4 @ keyAddr [3:0] $end
$var reg 1 A ctrl_dataIn_enc $end
$var wire 1 B ctrl_dataOut_enc $end
$var reg 128 C enc_dataIn [127:0] $end
$var reg 128 D enc_dataOut [127:0] $end
$var reg 1 E ctrl_dataIn_dec $end
$var reg 1 F ctrl_dataOut_dec $end
$var reg 128 G dec_dataIn [127:0] $end
$var wire 128 H dec_dataOut [127:0] $end
$var reg 1 I ctrl_dataIn_kg $end
$var reg 1 J ctrl_dataOut_kg $end
$var reg 128 K kg_dataIn [127:0] $end
$var wire 128 L kg_dataOut [127:0] $end
$var reg 128 M inp_romKey [127:0] $end
$var reg 1 N wr_en_rom $end
$var integer 32 O index $end
$scope module encrypter $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 1 P ctrl_dataIn_enc $end
$var wire 128 Q enc_key [127:0] $end
$var wire 128 R enc_dataIn [127:0] $end
$var reg 1 S ctrl_dataOut_enc $end
$var reg 4 @ enc_keyAddr [3:0] $end
$var reg 128 D enc_dataOut [127:0] $end
$var reg 128 T auxData [15:0] $end
$var integer 32 U i $end
$var integer 32 V index $end
$var reg 4 W aes_st [3:0] $end
$var reg 4 X aes_st_next [3:0] $end
$var reg 4 Y round [3:0] $end
$var reg 1 Z end_st_reg $end
$var reg 1 [ mux_chgInp $end
$var wire 8 \ dataOut_ROM [7:0] $end
$var reg 5 ] rom_cnt [4:0] $end
$var reg 1 ^ req_rom $end
$var reg 1 _ shf_reg $end
$var wire 128 ` dataOut_shifter [15:0] $end
$var reg 1 a wr_shf $end
$var reg 1 b wr_shf_delay $end
$var reg 1 c outp_en_shf $end
$var reg 1 d outp_en_shf_delay $end
$var wire 128 e dataOut_mixColumns [15:0] $end
$var reg 1 f wr_mC $end
$var reg 1 g wr_mC_delay $end
$var wire 128 h dataOut_reg16_2 [15:0] $end
$var reg 2 i reg162_cnt [1:0] $end
$var reg 1 j wr_reg162 $end
$var reg 1 k wr_reg162_delay $end
$var wire 128 l dataIn_addRK [15:0] $end
$var reg 128 m dataOut_addRK [15:0] $end
$var wire 8 n dataOut_reg163 [7:0] $end
$var reg 1 o wr_reg163 $end
$var wire 128 p key [127:0] $end
$scope module mux $end
$var wire 1 q addr $end
$var wire 128 r inp0 [15:0] $end
$var wire 128 h inp1 [15:0] $end
$var reg 128 s aux [15:0] $end
$var reg 128 t outp [15:0] $end
$upscope $end
$scope module addRK $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 128 p inp_key_addRK [127:0] $end
$var wire 128 l inp_addRK [15:0] $end
$var reg 128 m outp_addRK [15:0] $end
$var integer 32 u index $end
$var integer 32 v row $end
$upscope $end
$scope module reg16_3 $end
$var integer 32 w index $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 1 x wr_en $end
$var wire 1 y req_rom $end
$var wire 128 z inp_reg163 [15:0] $end
$var reg 128 { aux [15:0] $end
$var reg 4 | n_read [3:0] $end
$var reg 4 } n_read_delay [3:0] $end
$var reg 8 ~ outp_reg163 [7:0] $end
$upscope $end
$scope module rom_Sbox $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 8 n addr_romSbox [7:0] $end
$var reg 8 !! outp_romSbox [7:0] $end
$upscope $end
$scope module shifter $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 1 "! wr_en $end
$var wire 8 \ inp_shf [7:0] $end
$var wire 1 #! outp_en $end
$var reg 128 $! aux [15:0] $end
$var reg 4 %! counter [3:0] $end
$var wire 128 ` outp_shf [15:0] $end
$var integer 32 &! index $end
$upscope $end
$scope module mixColumns $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 128 ` inp_mC [15:0] $end
$var wire 1 '! wr_en $end
$var reg 32 (! row [3:0] $end
$var reg 128 )! temp [15:0] $end
$var reg 128 *! auxIn [15:0] $end
$var reg 128 +! outp_mC [15:0] $end
$var integer 32 ,! index $end
$var integer 32 -! rowNum $end
$scope function mix_columns $end
$var reg 128 .! mix_columns [15:0] $end
$var reg 128 /! inp_mC [15:0] $end
$upscope $end
$scope function xtime $end
$var reg 8 0! xtime [7:0] $end
$var reg 8 1! num [7:0] $end
$upscope $end
$upscope $end
$scope module reg16_2 $end
$var integer 32 2! index $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 1 3! wr_en $end
$var wire 4 4! round [3:0] $end
$var wire 128 e inp_reg162_mC [15:0] $end
$var wire 128 ` inp_reg162_shf [15:0] $end
$var reg 128 5! aux [15:0] $end
$var reg 128 6! outp_reg162 [15:0] $end
$upscope $end
$upscope $end
$scope module decrypter $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 1 7! ctrl_dataIn_dec $end
$var wire 128 8! dec_dataIn [127:0] $end
$var wire 128 9! dec_key [127:0] $end
$var reg 1 F ctrl_dataOut_dec $end
$var reg 4 @ dec_keyAddr [3:0] $end
$var reg 128 :! dec_dataOut [127:0] $end
$var reg 128 ;! auxData [15:0] $end
$var integer 32 <! i $end
$var integer 32 =! index $end
$var reg 4 >! aes_st [3:0] $end
$var reg 4 ?! aes_st_next [3:0] $end
$var reg 4 @! round [3:0] $end
$var wire 128 A! dataOut_reg416 [15:0] $end
$var wire 1 B! reg416_empty $end
$var wire 1 C! reg416_full $end
$var wire 8 D! dataOut1_demux [7:0] $end
$var wire 128 E! dataOut2_demux [15:0] $end
$var wire 8 F! dataOut_ROM [7:0] $end
$var reg 5 G! rom_cnt [4:0] $end
$var reg 1 H! req_rom $end
$var reg 1 I! shf_reg $end
$var wire 128 J! dataIn_shifter [15:0] $end
$var wire 128 K! dataOut_shifter [15:0] $end
$var reg 1 L! wr_shf $end
$var reg 1 M! wr_shf_delay $end
$var reg 1 N! outp_en_shf $end
$var reg 1 O! outp_en_shf_delay $end
$var wire 128 P! dataOut_mixColumns [15:0] $end
$var reg 1 Q! wr_mC $end
$var reg 1 R! wr_mC_delay $end
$var wire 128 S! dataOut_reg162 [15:0] $end
$var reg 2 T! reg162_cnt [1:0] $end
$var reg 1 U! wr_reg162 $end
$var reg 1 V! wr_reg162_delay $end
$var wire 128 W! dataOut_reg161 [15:0] $end
$var reg 1 X! wr_reg161 $end
$var wire 128 Y! dataIn_addRK [15:0] $end
$var reg 128 Z! dataOut_addRK [15:0] $end
$var reg 1 [! wr_addRK $end
$var wire 8 \! dataOut_reg163 [7:0] $end
$var reg 1 ]! wr_reg163 $end
$var wire 128 ^! key [127:0] $end
$var reg 1 _! mux1_chgInp $end
$var reg 1 `! mux2_chgInp $end
$var reg 1 a! end_st_reg $end
$scope module mux $end
$var wire 1 b! addr $end
$var wire 128 c! inp0 [15:0] $end
$var wire 128 S! inp1 [15:0] $end
$var reg 128 d! aux [15:0] $end
$var reg 128 e! outp [15:0] $end
$upscope $end
$scope module shifter $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 128 J! inp_shf [15:0] $end
$var wire 1 f! outp_en $end
$var reg 128 g! aux [15:0] $end
$var reg 128 h! outp_shf [15:0] $end
$var integer 32 i! index $end
$upscope $end
$scope module reg16_3 $end
$var integer 32 j! index $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 1 k! wr_en $end
$var wire 1 l! req_rom $end
$var wire 128 K! inp_reg163 [15:0] $end
$var reg 128 m! aux [15:0] $end
$var reg 4 n! n_read [3:0] $end
$var reg 4 o! n_read_delay [3:0] $end
$var reg 8 p! outp_reg163 [7:0] $end
$upscope $end
$scope module rom_Sbox $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 8 \! addr_romSbox [7:0] $end
$var reg 8 q! aux [7:0] $end
$var reg 8 r! outp_romSbox [7:0] $end
$upscope $end
$scope module reg16_1 $end
$var integer 32 s! index $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 1 t! wr_en $end
$var wire 8 F! i [7:0] $end
$var reg 128 u! aux [15:0] $end
$var reg 4 v! counter [3:0] $end
$var reg 128 w! o [15:0] $end
$upscope $end
$scope module mux2 $end
$var wire 1 x! addr $end
$var wire 128 y! inp0 [15:0] $end
$var wire 128 W! inp1 [15:0] $end
$var reg 128 z! aux [15:0] $end
$var reg 128 {! outp [15:0] $end
$upscope $end
$scope module addRK $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 128 ^! inp_key_addRK [127:0] $end
$var wire 128 Y! inp_addRK [15:0] $end
$var reg 128 Z! outp_addRK [15:0] $end
$var integer 32 |! index $end
$var integer 32 }! row $end
$upscope $end
$scope module mixColumns $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 128 ~! inp_mC [15:0] $end
$var wire 1 !" wr_en $end
$var reg 128 "" lookup [15:0] $end
$var reg 128 #" temp [15:0] $end
$var reg 128 $" auxIn [15:0] $end
$var reg 128 %" outp_mC [15:0] $end
$var integer 32 &" index $end
$var integer 32 '" i $end
$var integer 32 (" j $end
$scope function invMixColumns $end
$var reg 128 )" invMixColumns [15:0] $end
$var reg 128 *" inp_mC [15:0] $end
$upscope $end
$scope function xtime $end
$var reg 8 +" xtime [7:0] $end
$var reg 8 ," num [7:0] $end
$upscope $end
$upscope $end
$scope module reg16_2 $end
$var integer 32 -" index $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 1 ." wr_en $end
$var wire 4 /" round [3:0] $end
$var wire 128 P! inp_reg162_mC [15:0] $end
$var wire 128 0" inp_reg162_shf [15:0] $end
$var reg 128 1" aux [15:0] $end
$var reg 128 2" outp_reg162 [15:0] $end
$upscope $end
$upscope $end
$scope module keygen $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 128 3" kg_dataIn [127:0] $end
$var wire 1 4" ctrl_dataIn_kg $end
$var reg 128 5" kg_dataOut [127:0] $end
$var reg 1 J ctrl_dataOut_kg $end
$var reg 4 6" kg_st [3:0] $end
$var reg 4 7" kg_st_next [3:0] $end
$var reg 8 8" round [7:0] $end
$var reg 3 9" word_cnt [2:0] $end
$var reg 128 :" key_aux [127:0] $end
$var reg 3 ;" cond_getWord [2:0] $end
$var reg 2 <" subWord_cnt [1:0] $end
$var reg 32 =" temp [3:0] $end
$var reg 32 >" temp2 [3:0] $end
$var reg 1920 ?" wordlist [239:0] $end
$var reg 56 @" Rcon [6:0] $end
$var integer 32 A" index $end
$var integer 32 B" i $end
$var integer 32 C" iAux $end
$var integer 32 D" iOut $end
$var reg 2 E" key_num [1:0] $end
$var reg 2 F" key_num_delay [1:0] $end
$var reg 32 G" dataIn_rotWord [3:0] $end
$var wire 32 H" dataOut_rotWord [3:0] $end
$var reg 1 I" wr_rotWord $end
$var reg 8 J" dataIn_subWord [7:0] $end
$var wire 8 K" dataOut_subWord [7:0] $end
$var reg 1 L" end_st_reg $end
$scope module rotWord $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 1 M" wr_rotWord $end
$var wire 32 N" inp_rotWord [3:0] $end
$var reg 32 O" outp_rotWord [3:0] $end
$upscope $end
$scope module subWord $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 8 P" addr_subWord [7:0] $end
$var reg 8 Q" outp_subWord [7:0] $end
$var integer 32 R" index $end
$upscope $end
$upscope $end
$scope module romKey $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 4 S" addr_romKey [3:0] $end
$var wire 128 L inp_romKey [127:0] $end
$var wire 1 T" wrEn_romKey $end
$var reg 128 ? outp_romKey [127:0] $end
$var reg 1920 U" rom [14:0] $end
$var reg 4 V" key_cnt [3:0] $end
$upscope $end
$upscope $end
$scope task enableResetn $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
bx !!
x!"
x"
x"!
bx ""
x#
x#!
bx #"
x$
bx $!
bx $"
bx %
bx %!
bx %"
bx &
bx &!
bx &"
bx '
x'!
bx '"
bx (
bx (!
bx ("
bx )
bx )!
bx )"
b0 *
bx *!
bx *"
b0 +
bx +!
b0 +"
bx ,
bx ,!
bx ,"
0-
bx -!
bx -"
x.
bx .!
x."
bx /
bx /!
bx /"
x0
b0 0!
bx 0"
bx 1
bx 1!
bx 1"
bx 2
bx 2!
bx 2"
bx 3
x3!
bx 3"
bx 4
bx 4!
x4"
bx 5
bx 5!
bx 5"
bx 6
bx 6!
bx 6"
x7
x7!
bx 7"
x8
bx 8!
bx 8"
x9
bx 9!
bx 9"
x:
bx :!
bx :"
bx ;
bx ;!
bx ;"
bx <
bx <!
bx <"
bx =
bx =!
bx ="
bx >
bx >!
bx >"
bx ?
bx ?!
bx ?"
bx @
bx @!
bx @"
xA
bz A!
bx A"
xB
zB!
bx B"
bx C
zC!
bx C"
bx D
bz D!
bx D"
xE
bz E!
bx E"
xF
bx F!
bx F"
bx G
bx G!
bx G"
bx H
xH!
bx H"
xI
xI!
xI"
xJ
bx J!
bx J"
bx K
bx K!
bx K"
bx L
xL!
xL"
bx M
xM!
xM"
xN
xN!
bx N"
bx O
xO!
bx O"
xP
bx P!
bx P"
bx Q
xQ!
bx Q"
bx R
xR!
bx R"
xS
bx S!
bx S"
bx T
bx T!
xT"
bx U
xU!
bx U"
bx V
xV!
bx V"
bx W
bx W!
bx X
xX!
bx Y
bx Y!
xZ
bx Z!
x[
x[!
bx \
bx \!
bx ]
x]!
x^
bx ^!
x_
x_!
bx `
x`!
xa
xa!
xb
xb!
xc
bx c!
xd
bx d!
bx e
bx e!
xf
xf!
xg
bx g!
bx h
bx h!
bx i
bx i!
xj
bx j!
xk
xk!
bx l
xl!
bx m
bx m!
bx n
bx n!
xo
bx o!
bx p
bx p!
xq
bx q!
bx r
bx r!
bx s
bx s!
bx t
xt!
bx u
bx u!
bx v
bx v!
bx w
bx w!
xx
xx!
xy
bx y!
bx z
bx z!
bx {
bx {!
bx |
bx |!
bx }
bx }!
bx ~
bx ~!
$end
#10000
1!
0!"
0"!
0#!
0$
0'!
1-
0."
03!
b0 4
b0 <"
0B
b0 D"
0F
b0 G!
0H!
0I"
0J
0L"
0M"
0N
0N!
bx P"
0Q!
0S
0T"
0U!
0Z
b0 ]
0]!
0^
0a!
0c
0f
0f!
0j
0k!
0l!
0o
b10000 u
bx v
0x
0y
b10000 |!
bx }!
#11000
b1100011 !!
0"
0#
b0 $!
b0 $"
b0 %!
b0 %"
b10000 &"
b0 *!
b0 +!
b0 ,
0.
b0 /"
00
b0 0"
b0 1"
b0 2
b0 2"
b0 3
b0 4!
04"
b0 5
b0 5!
b0 6
b0 6!
b0 6"
07!
b0 7"
08
b1000 8"
09
b0 9!
0:
bx0000000000000000 :!
b0 ;
b0 <
b10000 <!
b0 =
b0 ="
b0 >!
b0 >"
b0 ?
b0 ?!
b0 ?"
b1110 @
b0 @!
b1000000001000000001000000001000000001000000001000000001 @"
0A
bx0000000000000000 D
0E
b0 E"
b0 F"
bx0000000000000000 H
b0 H"
0I
b0 J!
b0 K!
b1100011 K"
b0 O"
0P
b0 P!
b0 P"
b0 Q
b1100011 Q"
b0 S!
b1110 S"
b10000 U
b0 U"
b0 V"
b0 W
b0 W!
b0 X
0X!
b0 Y
b0 Z!
0[
b1100011 \
b0 \!
b0 ^!
0_
0_!
b0 `
0`!
0a
0b!
b0 c!
b0 e
b0 e!
b0 h
b0 h!
b0 m
b0 m!
b0 n
b0 n!
b0 o!
b0 p
b0 p!
0q
b1010010 q!
bx t
0t!
b0 u!
b0 v
b0 v!
b0 w!
0x!
b0 z
b0 {
bx {!
b0 |
b10000 |!
b0 }
b0 }!
b0 ~
b0 ~!
#20000
0!
0-
#30000
1!
b10000 &"
1-
b10000 <!
b10000 U
b10000 |!
#31000
1"
1.
#40000
0!
0-
#50000
1!
1#
b10 %
b1111000011100000110100001100000010110000101000001001000010000000011100000110000001010000010000000011000000100000000100000000 &
b1 ,
1-
b10 /
10
bx 0"
b1111000011100000110100001100000010110000101000001001000010000000011100000110000001010000010000000011000000100000000100000000 1
b101 3
bx J!
bx K!
bx Z!
bx c!
bx e!
bx h!
bx m
b10000 u
b1 v
bx z
b10000 |!
b1 }!
bx ~!
#60000
0!
0-
#70000
1!
b10 ,
1-
b101 2
b1 6
b1111000011100000110100001100000010110000101000001001000010000000011100000110000001010000010000000011000000100000000100000000 ;
b10000 u
b10 v
b10000 |!
b10 }!
#80000
0!
0-
#90000
1!
b11 ,
1-
