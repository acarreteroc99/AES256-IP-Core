$date
   Thu Dec 23 14:41:56 2021
$end
$version
  2020.2
$end
$timescale
  1ps
$end
$scope module tb_AES256_device $end
$var reg 1 ! clk $end
$var reg 1 " resetn $end
$var reg 1 # ctrl_dataIn $end
$var reg 1 $ ctrl_dataOut $end
$var reg 2 % mod_en [1:0] $end
$var reg 128 & inp_device [127:0] $end
$var reg 128 ' out_device [127:0] $end
$var reg 128 ( enc_dataOut [127:0] $end
$var reg 128 ) dec_dataOut [127:0] $end
$var integer 32 * i $end
$var integer 32 + j $end
$var integer 32 , index $end
$scope module DUT $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 2 / mod_en [1:0] $end
$var wire 1 0 ctrl_dataIn $end
$var wire 128 1 inp_device [127:0] $end
$var reg 1 $ ctrl_dataOut $end
$var reg 128 ' outp_device [127:0] $end
$var reg 3 2 dev_st [2:0] $end
$var reg 3 3 dev_st_next [2:0] $end
$var reg 4 4 rom_cnt [3:0] $end
$var reg 2 5 seed_cnt [1:0] $end
$var reg 1 6 end_st_reg $end
$var reg 128 7 auxData [127:0] $end
$var reg 128 8 key [127:0] $end
$var reg 4 9 keyAddr [3:0] $end
$var reg 1 : ctrl_dataIn_enc $end
$var wire 1 ; ctrl_dataOut_enc $end
$var reg 128 < enc_dataIn [127:0] $end
$var reg 128 = enc_dataOut [127:0] $end
$var reg 1 > ctrl_dataIn_dec $end
$var reg 1 ? ctrl_dataOut_dec $end
$var reg 128 @ dec_dataIn [127:0] $end
$var wire 128 A dec_dataOut [127:0] $end
$var reg 1 B ctrl_dataIn_kg $end
$var reg 1 C ctrl_dataOut_kg $end
$var reg 128 D kg_dataIn [127:0] $end
$var wire 128 E kg_dataOut [127:0] $end
$var reg 128 F inp_romKey [127:0] $end
$var reg 1 G wr_en_rom $end
$scope module encrypter $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 1 H ctrl_dataIn_enc $end
$var wire 128 I enc_key [127:0] $end
$var wire 128 J enc_dataIn [127:0] $end
$var reg 1 K ctrl_dataOut_enc $end
$var reg 4 9 enc_keyAddr [3:0] $end
$var reg 128 = enc_dataOut [127:0] $end
$var reg 128 L auxData [15:0] $end
$var integer 32 M i $end
$var integer 32 N index $end
$var reg 4 O aes_st [3:0] $end
$var reg 4 P aes_st_next [3:0] $end
$var reg 4 Q round [3:0] $end
$var reg 1 R end_st_reg $end
$var reg 1 S mux_chgInp $end
$var wire 8 T dataOut_ROM [7:0] $end
$var reg 5 U rom_cnt [4:0] $end
$var reg 1 V req_rom $end
$var reg 1 W shf_reg $end
$var wire 128 X dataOut_shifter [15:0] $end
$var reg 1 Y wr_shf $end
$var reg 1 Z wr_shf_delay $end
$var reg 1 [ outp_en_shf $end
$var reg 1 \ outp_en_shf_delay $end
$var wire 128 ] dataOut_mixColumns [15:0] $end
$var reg 1 ^ wr_mC $end
$var reg 1 _ wr_mC_delay $end
$var wire 128 ` dataOut_reg16_2 [15:0] $end
$var reg 2 a reg162_cnt [1:0] $end
$var reg 1 b wr_reg162 $end
$var reg 1 c wr_reg162_delay $end
$var wire 128 d dataIn_addRK [15:0] $end
$var reg 128 e dataOut_addRK [15:0] $end
$var wire 8 f dataOut_reg163 [7:0] $end
$var reg 1 g wr_reg163 $end
$var wire 128 h key [127:0] $end
$scope module mux $end
$var wire 1 i addr $end
$var wire 128 j inp0 [15:0] $end
$var wire 128 ` inp1 [15:0] $end
$var reg 128 k aux [15:0] $end
$var reg 128 l outp [15:0] $end
$upscope $end
$scope module addRK $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 128 h inp_key_addRK [127:0] $end
$var wire 128 d inp_addRK [15:0] $end
$var reg 128 e outp_addRK [15:0] $end
$var integer 32 m index $end
$var integer 32 n row $end
$upscope $end
$scope module reg16_3 $end
$var integer 32 o index $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 1 p wr_en $end
$var wire 1 q req_rom $end
$var wire 128 r inp_reg163 [15:0] $end
$var reg 128 s aux [15:0] $end
$var reg 4 t n_read [3:0] $end
$var reg 4 u n_read_delay [3:0] $end
$var reg 8 v outp_reg163 [7:0] $end
$upscope $end
$scope module rom_Sbox $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 8 f addr_romSbox [7:0] $end
$var reg 8 w outp_romSbox [7:0] $end
$upscope $end
$scope module shifter $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 1 x wr_en $end
$var wire 8 T inp_shf [7:0] $end
$var wire 1 y outp_en $end
$var reg 128 z aux [15:0] $end
$var reg 4 { counter [3:0] $end
$var wire 128 X outp_shf [15:0] $end
$var integer 32 | index $end
$upscope $end
$scope module mixColumns $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 128 X inp_mC [15:0] $end
$var wire 1 } wr_en $end
$var reg 32 ~ row [3:0] $end
$var reg 128 !! temp [15:0] $end
$var reg 128 "! auxIn [15:0] $end
$var reg 128 #! outp_mC [15:0] $end
$var integer 32 $! index $end
$var integer 32 %! rowNum $end
$scope function mix_columns $end
$var reg 128 &! mix_columns [15:0] $end
$var reg 128 '! inp_mC [15:0] $end
$upscope $end
$scope function xtime $end
$var reg 8 (! xtime [7:0] $end
$var reg 8 )! num [7:0] $end
$upscope $end
$upscope $end
$scope module reg16_2 $end
$var integer 32 *! index $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 1 +! wr_en $end
$var wire 4 ,! round [3:0] $end
$var wire 128 ] inp_reg162_mC [15:0] $end
$var wire 128 X inp_reg162_shf [15:0] $end
$var reg 128 -! aux [15:0] $end
$var reg 128 .! outp_reg162 [15:0] $end
$upscope $end
$upscope $end
$scope module decrypter $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 1 /! ctrl_dataIn_dec $end
$var wire 128 0! dec_dataIn [127:0] $end
$var wire 128 1! dec_key [127:0] $end
$var reg 1 ? ctrl_dataOut_dec $end
$var reg 4 9 dec_keyAddr [3:0] $end
$var reg 128 2! dec_dataOut [127:0] $end
$var reg 128 3! auxData [15:0] $end
$var integer 32 4! i $end
$var integer 32 5! index $end
$var reg 4 6! aes_st [3:0] $end
$var reg 4 7! aes_st_next [3:0] $end
$var reg 4 8! round [3:0] $end
$var wire 128 9! dataOut_reg416 [15:0] $end
$var wire 1 :! reg416_empty $end
$var wire 1 ;! reg416_full $end
$var wire 8 <! dataOut1_demux [7:0] $end
$var wire 128 =! dataOut2_demux [15:0] $end
$var wire 8 >! dataOut_ROM [7:0] $end
$var reg 5 ?! rom_cnt [4:0] $end
$var reg 1 @! req_rom $end
$var reg 1 A! shf_reg $end
$var wire 128 B! dataIn_shifter [15:0] $end
$var wire 128 C! dataOut_shifter [15:0] $end
$var reg 1 D! wr_shf $end
$var reg 1 E! wr_shf_delay $end
$var reg 1 F! outp_en_shf $end
$var reg 1 G! outp_en_shf_delay $end
$var wire 128 H! dataOut_mixColumns [15:0] $end
$var reg 1 I! wr_mC $end
$var reg 1 J! wr_mC_delay $end
$var wire 128 K! dataOut_reg162 [15:0] $end
$var reg 2 L! reg162_cnt [1:0] $end
$var reg 1 M! wr_reg162 $end
$var reg 1 N! wr_reg162_delay $end
$var wire 128 O! dataOut_reg161 [15:0] $end
$var reg 1 P! wr_reg161 $end
$var wire 128 Q! dataIn_addRK [15:0] $end
$var reg 128 R! dataOut_addRK [15:0] $end
$var reg 1 S! wr_addRK $end
$var wire 8 T! dataOut_reg163 [7:0] $end
$var reg 1 U! wr_reg163 $end
$var wire 128 V! key [127:0] $end
$var reg 1 W! mux1_chgInp $end
$var reg 1 X! mux2_chgInp $end
$var reg 1 Y! end_st_reg $end
$scope module mux $end
$var wire 1 Z! addr $end
$var wire 128 [! inp0 [15:0] $end
$var wire 128 K! inp1 [15:0] $end
$var reg 128 \! aux [15:0] $end
$var reg 128 ]! outp [15:0] $end
$upscope $end
$scope module shifter $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 128 B! inp_shf [15:0] $end
$var wire 1 ^! outp_en $end
$var reg 128 _! aux [15:0] $end
$var reg 128 `! outp_shf [15:0] $end
$var integer 32 a! index $end
$upscope $end
$scope module reg16_3 $end
$var integer 32 b! index $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 1 c! wr_en $end
$var wire 1 d! req_rom $end
$var wire 128 C! inp_reg163 [15:0] $end
$var reg 128 e! aux [15:0] $end
$var reg 4 f! n_read [3:0] $end
$var reg 4 g! n_read_delay [3:0] $end
$var reg 8 h! outp_reg163 [7:0] $end
$upscope $end
$scope module rom_Sbox $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 8 T! addr_romSbox [7:0] $end
$var reg 8 i! aux [7:0] $end
$var reg 8 j! outp_romSbox [7:0] $end
$upscope $end
$scope module reg16_1 $end
$var integer 32 k! index $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 1 l! wr_en $end
$var wire 8 >! i [7:0] $end
$var reg 128 m! aux [15:0] $end
$var reg 4 n! counter [3:0] $end
$var reg 128 o! o [15:0] $end
$upscope $end
$scope module mux2 $end
$var wire 1 p! addr $end
$var wire 128 q! inp0 [15:0] $end
$var wire 128 O! inp1 [15:0] $end
$var reg 128 r! aux [15:0] $end
$var reg 128 s! outp [15:0] $end
$upscope $end
$scope module addRK $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 128 V! inp_key_addRK [127:0] $end
$var wire 128 Q! inp_addRK [15:0] $end
$var reg 128 R! outp_addRK [15:0] $end
$var integer 32 t! index $end
$var integer 32 u! row $end
$upscope $end
$scope module mixColumns $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 128 v! inp_mC [15:0] $end
$var wire 1 w! wr_en $end
$var reg 128 x! lookup [15:0] $end
$var reg 128 y! temp [15:0] $end
$var reg 128 z! auxIn [15:0] $end
$var reg 128 {! outp_mC [15:0] $end
$var integer 32 |! index $end
$var integer 32 }! i $end
$var integer 32 ~! j $end
$scope function invMixColumns $end
$var reg 128 !" invMixColumns [15:0] $end
$var reg 128 "" inp_mC [15:0] $end
$upscope $end
$scope function xtime $end
$var reg 8 #" xtime [7:0] $end
$var reg 8 $" num [7:0] $end
$upscope $end
$upscope $end
$scope module reg16_2 $end
$var integer 32 %" index $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 1 &" wr_en $end
$var wire 4 '" round [3:0] $end
$var wire 128 H! inp_reg162_mC [15:0] $end
$var wire 128 (" inp_reg162_shf [15:0] $end
$var reg 128 )" aux [15:0] $end
$var reg 128 *" outp_reg162 [15:0] $end
$upscope $end
$upscope $end
$scope module keygen $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 128 +" kg_dataIn [127:0] $end
$var wire 1 ," ctrl_dataIn_kg $end
$var reg 128 -" kg_dataOut [127:0] $end
$var reg 1 C ctrl_dataOut_kg $end
$var reg 4 ." kg_st [3:0] $end
$var reg 4 /" kg_st_next [3:0] $end
$var reg 8 0" round [7:0] $end
$var reg 3 1" word_cnt [2:0] $end
$var reg 128 2" key_aux [127:0] $end
$var reg 3 3" cond_getWord [2:0] $end
$var reg 2 4" subWord_cnt [1:0] $end
$var reg 32 5" temp [3:0] $end
$var reg 32 6" temp2 [3:0] $end
$var reg 1920 7" wordlist [239:0] $end
$var reg 56 8" Rcon [6:0] $end
$var integer 32 9" index $end
$var integer 32 :" i $end
$var integer 32 ;" iAux $end
$var integer 32 <" iOut $end
$var reg 2 =" key_num [1:0] $end
$var reg 2 >" key_num_delay [1:0] $end
$var reg 32 ?" dataIn_rotWord [3:0] $end
$var wire 32 @" dataOut_rotWord [3:0] $end
$var reg 1 A" wr_rotWord $end
$var reg 8 B" dataIn_subWord [7:0] $end
$var wire 8 C" dataOut_subWord [7:0] $end
$var reg 1 D" end_st_reg $end
$scope module rotWord $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 1 E" wr_rotWord $end
$var wire 32 F" inp_rotWord [3:0] $end
$var reg 32 G" outp_rotWord [3:0] $end
$upscope $end
$scope module subWord $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 8 H" addr_subWord [7:0] $end
$var reg 8 I" outp_subWord [7:0] $end
$var integer 32 J" index $end
$upscope $end
$upscope $end
$scope module romKey $end
$var wire 1 - clk $end
$var wire 1 . resetn $end
$var wire 4 K" addr_romKey [3:0] $end
$var wire 128 E inp_romKey [127:0] $end
$var wire 1 L" wrEn_romKey $end
$var reg 128 8 outp_romKey [127:0] $end
$var reg 1920 M" rom [14:0] $end
$var reg 4 N" key_cnt [3:0] $end
$upscope $end
$upscope $end
$scope task enableResetn $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
bx !!
bx !"
x"
bx "!
bx ""
x#
bx #!
b0 #"
x$
bx $!
bx $"
bx %
bx %!
bx %"
bx &
bx &!
x&"
bx '
bx '!
bx '"
bx (
b0 (!
bx ("
bx )
bx )!
bx )"
b0 *
bx *!
bx *"
b0 +
x+!
bx +"
bx ,
bx ,!
x,"
0-
bx -!
bx -"
x.
bx .!
bx ."
bx /
x/!
bx /"
x0
bx 0!
bx 0"
bx 1
bx 1!
bx 1"
bx 2
bx 2!
bx 2"
bx 3
bx 3!
bx 3"
bx 4
bx 4!
bx 4"
bx 5
bx 5!
bx 5"
x6
bx 6!
bx 6"
bx 7
bx 7!
bx 7"
bx 8
bx 8!
bx 8"
bx 9
bz 9!
bx 9"
x:
z:!
bx :"
x;
z;!
bx ;"
bx <
bz <!
bx <"
bx =
bz =!
bx ="
x>
bx >!
bx >"
x?
bx ?!
bx ?"
bx @
x@!
bx @"
bx A
xA!
xA"
xB
bx B!
bx B"
xC
bx C!
bx C"
bx D
xD!
xD"
bx E
xE!
xE"
bx F
xF!
bx F"
xG
xG!
bx G"
xH
bx H!
bx H"
bx I
xI!
bx I"
bx J
xJ!
bx J"
xK
bx K!
bx K"
bx L
bx L!
xL"
bx M
xM!
bx M"
bx N
xN!
bx N"
bx O
bx O!
bx P
xP!
bx Q
bx Q!
xR
bx R!
xS
xS!
bx T
bx T!
bx U
xU!
xV
bx V!
xW
xW!
bx X
xX!
xY
xY!
xZ
xZ!
x[
bx [!
x\
bx \!
bx ]
bx ]!
x^
x^!
x_
bx _!
bx `
bx `!
bx a
bx a!
xb
bx b!
xc
xc!
bx d
xd!
bx e
bx e!
bx f
bx f!
xg
bx g!
bx h
bx h!
xi
bx i!
bx j
bx j!
bx k
bx k!
bx l
xl!
bx m
bx m!
bx n
bx n!
bx o
bx o!
xp
xp!
xq
bx q!
bx r
bx r!
bx s
bx s!
bx t
bx t!
bx u
bx u!
bx v
bx v!
bx w
xw!
xx
bx x!
xy
bx y!
bx z
bx z!
bx {
bx {!
bx |
bx |!
x}
bx }!
bx ~
bx ~!
$end
#10000
1!
0$
0&"
0+!
1-
b0 4
b0 4"
0;
b0 <"
0?
b0 ?!
0@!
0A"
0C
0D"
0E"
0F!
0G
bx H"
0I!
0K
0L"
0M!
0R
b0 U
0U!
0V
0Y!
0[
0^
0^!
0b
0c!
0d!
0g
b10000 m
bx n
0p
0q
b10000 t!
bx u!
0w!
0x
0y
0}
#11000
0"
b0 "!
0#
b0 #!
b0 '"
b0 ("
b0 )"
b0 *"
b0 ,
b0 ,!
0,"
b0 -!
0.
b0 .!
b0 ."
0/!
b0 /"
00
b1000 0"
b0 1!
b0 2
bx0000000000000000 2!
b0 3
b10000 4!
b0 5
b0 5"
06
b0 6!
b0 6"
b0 7!
b0 7"
b0 8
b0 8!
b1000000001000000001000000001000000001000000001000000001 8"
b1110 9
0:
bx0000000000000000 =
b0 ="
0>
b0 >"
b0 @"
bx0000000000000000 A
0B
b0 B!
b0 C!
b1100011 C"
b0 G"
0H
b0 H!
b0 H"
b0 I
b1100011 I"
b0 K!
b1110 K"
b10000 M
b0 M"
b0 N"
b0 O
b0 O!
b0 P
0P!
b0 Q
b0 R!
0S
b1100011 T
b0 T!
b0 V!
0W
0W!
b0 X
0X!
0Y
0Z!
b0 [!
b0 ]
b0 ]!
b0 `
b0 `!
b0 e
b0 e!
b0 f
b0 f!
b0 g!
b0 h
b0 h!
0i
b1010010 i!
bx l
0l!
b0 m!
b0 n
b0 n!
b0 o!
0p!
b0 r
b0 s
bx s!
b0 t
b10000 t!
b0 u
b0 u!
b0 v
b0 v!
b1100011 w
b0 z
b0 z!
b0 {
b0 {!
b10000 |!
#20000
0!
0-
#30000
1!
1-
b10000 4!
b10000 M
b10000 t!
b10000 |!
#31000
1"
1.
#40000
0!
0-
#50000
1!
1#
b10 %
b1111000011100000110100001100000010110000101000001001000010000000011100000110000001010000010000000011000000100000000100000000 &
bx ("
b1 ,
1-
b10 /
10
b1111000011100000110100001100000010110000101000001001000010000000011100000110000001010000010000000011000000100000000100000000 1
b101 3
bx B!
bx C!
bx R!
bx [!
bx ]!
bx `!
bx e
b10000 m
b1 n
bx r
b10000 t!
b1 u!
bx v!
